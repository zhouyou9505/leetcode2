QA：

1、每道题目都要写下
（1）暴力解法是怎样的，重复计算了什么步骤
（2）第一次尝试为什么是错的。
（3）实际动态规划是怎样的。
每步之间有什么关联。思路。

1、动态规划解题步骤
理解题意：
一般只要求返回最优的数量，不用返回具体内容的，一般都可以用动态规划

如何定义状态：
（1）动态规划的思想：通过解决一个个简单的问题
（2）把一个大问题拆分子问题。并且前一个子问题能把最优解传给下一个子问题。（其实前一个子问题已经帮后一个子问题算过最佳值了）
所以一般dp[i]都是以i结尾，这样
1：无后效性，不影响后面结果
2：把0-i区间在i+1里面，将最优解存到dp[i]里，省的i+1子集重复算一遍
{
    怎么理解这个dp[i]，经过这个这么多处理，比如说连续子集，怎么知道dp[5]存的是哪一段呢？如果是存在 2~4 呢？
    -- 因为这题53题，如果前面dp[i-1]是负数，又要连续，那我铁定放弃dp[i-1]，要dp[i] = nums[i]。所以不可能是2-4。
    一定是 x~5 或者 5，后面只管用就是了
}
（3）


3、解题套路
《动态规划-最长公共子序列》
求两个数组或者字符串的最长公共子序列问题，肯定是要用动态规划的。下面的题解并不难，你肯定能看懂。
首先，区分两个概念：子序列可以是不连续的；子数组（子字符串）需要是连续的；
另外，动态规划也是有套路的：单个数组或者字符串要用动态规划时，可以把动态规划 dp[i] 定义为 nums[0:i] 中想要求的结果；
当两个数组或者字符串要用动态规划时，可以把动态规划定义成两维的 dp[i][j]，其含义是在 A[0:i] 与 B[0:j]之间匹配得到的想要的结果。
链接：https://leetcode-cn.com/problems/longest-common-subsequence/solution/fu-xue-ming-zhu-er-wei-dong-tai-gui-hua-r5ez6/

待学习题解:
https://leetcode-cn.com/problems/longest-common-subsequence/solution/1143-zui-chang-gong-gong-zi-xu-lie-dong-zde2v/


4、dp连续性问题
1.dp[i-x]直接传递到dp[i]，最后答案是dp[i]

2.dp[i-x]直接传递到dp[i], 最后答案是每次 max = Math.max(max,dp[i])
LongestValidParentheses32

3.dp[i-x]~dp[i]中间出现dp[0]=0， 最后答案是每次 max = Math.max(max,dp[i])
FindLength718