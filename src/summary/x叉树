------94. 二叉树的中序遍历
左根右
 dfs(root.left);
 list.add(root.val);
 dfs(root.right);



-------144. 二叉树的前序遍历
list.add(root.val);
dfs(root.left);
dfs(root.right);


-------110. 平衡二叉树
递归返回当前树的最大深度，中间顺便比较一下树的左右子树高度差是否>1 ，然后记个check=false;
int dfs(TreeNode root){
 
  int left = dfs(root.left);
  int right = dfs(root.right);
  if (Math.abs(left-right) > 1){
       ok = false;
       return 0 ;
  }
  return Math.max(left,right)+1
}


--------104. 二叉树的最大深度
int left = dfs(root.left);
int right = dfs(root.right);
return Math.max(left,right) + 1;



---------543. 二叉树的直径
//一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。
int left = dfs(root.left);
int right = dfs(root.right);
max = Math.max(max,left+right+1);
return Math.max(left,right)+1;
最后max-1


------101. 对称二叉树
public boolean isSymmetric(TreeNode root) {
   isPair(root.left, root.right);
   return check;
}
public void isPair(TreeNode left, TreeNode right) {
   /**
   * 判断值是否相等
  **/
        
  isPair(left.left, right.right);
  isPair(left.right, right.left);
}


--------剑指 Offer 54. 二叉搜索树的第k大节点
二叉搜索数的中序遍历是递增，反中序遍历就是递减
 dfs(root.right,k);
    ++count;
    if (count == k){
        res = root.val;
    }
dfs(root.left,k);



--------572. 另一棵树的子树     B是不是A的子树
首先，写一个这个树是不是等于另一棵树的方法。
遍历这棵子树 先看isSameTree(root,subRoot) || dfs(root.left,subRoot) || dfs(root.right,subRoot);
public boolean dfs(TreeNode root, TreeNode subRoot) {
  if (root == null || subRoot == null) {
      return false;
  }
  return isSame(root,subRoot) || dfs(root.left, subRoot) || dfs(root.right, subRoot);
}
