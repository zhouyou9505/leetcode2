快慢指针数学推导
https://www.jianshu.com/p/888f574925c3?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation


给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。
分析：如何判断有环？如何找到环的入口节点？
首先判断是否有环
1.穷举法。（每个节点都放到一个哈希表数组）这里我们使用容器set，如果遍历到某个链表结点已经在set中，那么该点即为环的入口结点；
2.快慢指针法。
（1）快指针一次走两步，慢指针一次走一步。如果有环的话，那么快指针一定会追上快指针，就像一个环形的跑道中，跑的快的运动员一定会追上跑的慢的运动员。
（2）快指针先走一步，然后和慢指针一起从从节点开始走。如果有环的话，那么快指针一定会追上快指针，就像一个环形的跑道中，跑的快的运动员一定会追上跑的慢的运动员。

如何找到环的入口节点
参考一种思路。一个数学问题。


如上图，
首先我们设：

链表头到环入口长度为--a

环入口到相遇点长度为--b

相遇点到环入口长度为--c

先说说快慢指针法的（2）。
如果链表存在环，那么计算出环的长度n，快指针先走n步，然后快指针和慢指针一块走，当两者相遇时，即为环的入口处；
证明如下：
设：

链表头到环入口长度为--a

链表总长度--k

环的长度--n

则：a+n=k,当快节点先走了一个环的长度n时，再走一个a的路程就到达链表的终点，也就是环的入口。所以此时让一个指针从头节点开始走，当两个指针相遇时，即为环的入口节点。

快慢指针法的（1）
两个结论：

1、设置快慢指针，假如有环，他们最后一定相遇。

2、两个指针分别从链表头和相遇点继续出发，每次走一步，最后一定相遇与环入口。

证明如下

证明1：设置快慢指针fast和low，fast每次走两步，low每次走一步。假如有环，两者一定会相遇（因为low一旦进环，可看作fast在后面追赶low的过程，每次两者都接近一步，最后一定能追上）。

证明2：

快指针路程=a+(b+c)k+b ，k>=1 其中b+c为环的长度，k为绕环的圈数（k>=1,即最少一圈，不能是0圈，不然和慢指针走的一样长，矛盾）。

慢指针路程=a+b

快指针走的路程是慢指针的两倍，所以：

（a+b）*2=a+(b+c)k+b

化简可得：

a=(k-1)(b+c)+c 这个式子的意思是： 链表头到环入口的距离=相遇点到环入口的距离+（k-1）圈环长度。其中k>=1,所以k-1>=0圈。所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。


https://upload-images.jianshu.io/upload_images/16237146-a620c5a8e294f63b.png?imageMogr2/auto-orient/strip|imageView2/2/w/613/format/webp