--------剑指 Offer 04. 二维数组中的查找
if (target < matrix[left][right]){
     -- right;
     continue;
 }

 if (target > matrix[left][right]){
     ++left;
 }


---------剑指 Offer 29. 顺时针打印矩阵
int left = 0, right = matrix[0].length - 1, top = 0, bottom = matrix.length - 1;
int[] res = new int[matrix[0].length * matrix.length];
int p = 0;
while (true) {
    从左往右
    for (int i = left; i <= right; i++) {
        res[p++] = matrix[top][i];
    }
    if (++top > bottom) {
        break;
    }
从上往下
从右往左
从下往上
            
            
------------349. 两个数组的交集
直接把数组存进去map， 再看第二个数组在map中是否存在，如果存在，那就是有
然后   list.stream.mapToInt(i->i).toArray();

---------剑指 Offer 61. 扑克牌中的顺子
 public boolean isStraight(int[] nums) {
        Arrays.sort(nums);
        int k = 0;
        for(int i = 0;i<nums.length-1;i++){
            if (nums[i] == 0){
                ++k;
            }else if (nums[i] == nums[i+1]){
                return false;
            }
        }
        //0有很多种摆放情况，但是只要两数只差在4以内，肯定没问题，4以外0填充不了
        return nums[nums.length-1] - nums[k] <= 4;
    }


---------15. 三数之和
先排序！！！！！
然后以flg为左边界  left = flg+1  ,right = len-1 .   left,right开始移动
注意 flg ,left,right 都要去重并注意边界



--------912. 排序数组
加入随机因子：
 int random = new Random().nextInt(right-left)+left;
 swap(arr,random,right);
 
把最右边的right作为 flg，  然后用快慢指针把数组一分为二，小于nums[right]放左边，大于nums[right]的放右边
int slow = left;
for(int fast = left;fast<= right-1; fast++){
    if (arr[fast] < arr[right]){
        swap(arr,slow,fast);
        ++slow;
    }
}
最后把flg跟slow换下，就是一次排序

然后递归治理 left,pivot-1   pivot+1,right
